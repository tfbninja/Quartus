
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module LAB9(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	inout 		          		CLOCK4_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX5,

	//////////// SW //////////
	input 		     [9:0]		SW
);


//=======================================================
//  REG/WIRE declarations
//=======================================================

	wire C0, C1, C2, C3, C4; // Carries
	wire [7:0] SUM;
	wire [3:0] ones, tens, hundreds, A, B;

//=======================================================
//  Structural coding
//=======================================================

	decoder_7_seg(CLOCK_50, SW[9:6], HEX5[6:0]);
	decoder_7_seg(CLOCK_50, SW[3:0], HEX3[6:0]);
	assign HEX5[6:0] = 7'b1111111;
	assign HEX3[6:0] = 7'b1111111;
	assign A[3:0] = SW[9:6];
	assign B[3:0] = SW[3:0];
	
	full_adder(SUM[0], C1, A[0], B[0], C0);
	full_adder(SUM[1], C2, A[1], B[1], C1);
	full_adder(SUM[2], C3, A[2], B[2], C2);
	full_adder(SUM[3], C4, A[3], B[3], C3);
	
	assign SUM[4] = C4;
	assign SUM[7:5] = 3'b000; // shortened
	
	binary_to_bcd(SUM, ones, tens, hundreds[1:0]);
	assign hundreds[3:2] = 2'b00;
	decoder_7_seg(CLOCK_50, tens[3:0], HEX1[6:0]);
	decoder_7_seg(CLOCK_50, ones[3:0], HEX0[6:0]);

endmodule
